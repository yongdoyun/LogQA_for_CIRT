# RayStation Script for Log-based QA of YCC CIRT
# Generated by MCHAN
# from connect import *
import pydicom
import pymedphys
import clr
import connect
import os
import tempfile
import random
import shutil
import logging
import sys
import platform
import matplotlib.pyplot as plt

clr.AddReference('System.Windows.Forms')
clr.AddReference('System.Drawing')

from System.Windows.Forms import Application, Form, Label, Button, TextBox, CheckBox, ComboBox, MessageBox
from System.Windows.Forms import OpenFileDialog, DialogResult, ComboBoxStyle, HorizontalAlignment
from System.Drawing import Point, Size

# Define Forms class that will prompt the user to select an
# ROI for creating isocenter data for the current beam set
class LogQAForm(Form):

    def __init__(self):

        # Set the size of the form
        self.Size = Size(540, 245)
        # Set title of the form
        self.Text = 'Log-based QA Script for YCC CIRT'

        # Set Dose Grid
        # Add a label
        label1 = Label()
        label1.Text = 'Step 1. Set Dose Grid for XYZ (Default: 3 mm)'
        label1.Location = Point(15, 15)
        label1.AutoSize = True
        self.Controls.Add(label1)

        # Add a listbox
        self.listbox = ComboBox()        
        self.listbox.Location = Point(300, 10)
        self.listbox.Size = Size(50, 100)
        self.listbox.DropDownHeight=50        
        self.listbox.Items.Insert(0,'3')
        self.listbox.Items.Insert(1,'2')
        self.listbox.Items.Insert(2,'1')
        self.listbox.SelectedIndex = 0
        self.listbox.DropDownStyle = ComboBoxStyle.DropDownList        
        self.Controls.Add(self.listbox)
        label0 = Label()
        label0.Text = ' mm'
        label0.Location = Point(355, 15)
        label0.AutoSize = True
        self.Controls.Add(label0)

        # Select RT-Record File (inc. log data)
        # Add a label
        label = Label()
        label.Text = 'Step 2. Select log data file'
        label.Location = Point(15, 40)
        label.AutoSize = True
        self.Controls.Add(label)

        # Add a textbox
        self.textbox = TextBox()
        self.textbox.Text = ""
        self.textbox.Location = Point(15, 60)
        self.textbox.Size = Size(450, 100)
        self.Controls.Add(self.textbox)

        # Add button to press OK and close the form
        button = Button()
        button.Text = '...'
        button.AutoSize = True
        button.Location = Point(470, 58)
        button.Size = Size(10, 20)
        button.Click += self.ok_button_clicked
        self.Controls.Add(button)

        # Add a label 
        label2 = Label()
        label2.Text = 'Step 3. Matching test between Plan and RT-Record'
        label2.Location = Point(15, 95)
        label2.AutoSize = True
        self.Controls.Add(label2)

        # Add a checkbox for MRN matching test
        self.cb1 = CheckBox()
        self.cb1.Location = Point(15, 117)
        self.cb1.AutoSize = True
        self.cb1.Enabled = False
        self.Controls.Add(self.cb1)


        label3 = Label()
        label3.Text = 'MRN'
        label3.Location = Point(40, 117)
        label3.AutoSize = True
        self.Controls.Add(label3)


        self.cb2 = CheckBox()
        self.cb2.Location = Point(110, 117)
        self.cb2.AutoSize = True
        self.cb2.Enabled = False
        self.Controls.Add(self.cb2)


        label4 = Label()
        label4.Text = 'No. Control Points'
        label4.Location = Point(135, 117)
        label4.AutoSize = True
        self.Controls.Add(label4)

        # Add a label for Step 4
        label5 = Label()
        label5.Text = 'Step 4. Calculate logQA dose & Gamma evaluation'
        label5.Location = Point(15, 147)
        label5.AutoSize = True
        self.Controls.Add(label5)


        # Add combobox for gamma local & global
        self.listbox1 = ComboBox()  
        self.listbox1.Location = Point(15, 167)
        self.listbox1.Size = Size(100, 100)
        self.listbox1.DropDownHeight=50
        self.listbox1.Items.Insert(0,'Global')
        self.listbox1.Items.Insert(1,'Local')   
        self.listbox1.SelectedIndex = 0     
        
        self.listbox1.DropDownStyle = ComboBoxStyle.DropDownList
        self.Controls.Add(self.listbox1)

        # Add button to press OK and close the form
        self.button2 = Button()
        self.button2.Text = 'DQA calculation'
        self.button2.AutoSize = True
        self.button2.Location = Point(125, 165)
        self.button2.Size = Size(100, 10)
        self.button2.Enabled = False
        self.button2.Click += self.ok_button2_clicked
        self.Controls.Add(self.button2)
        
        

        # Add button to press OK and close the form
        self.label6 = Label()
        self.label6.Text = "Gamma Passing Rate: "
        self.label6.Location = Point(300, 167)

        self.label6.AutoSize = True
        self.Controls.Add(self.label6)
        

    def ok_button_clicked(self, sender, event):
        # Method invoked when the button is clicked
        # Save the selected ROI name
        # Close the form

        dialog = OpenFileDialog()
        dialog.AutoUpgradeEnabled = False
        dialog.Title = "Open TSB Log File"
        dialog.Filter = "TSB-dedicated RT-Record (*.DCM) | *.dcm"

        if dialog.ShowDialog(self) == DialogResult.OK:
            self.filename = dialog.SafeFileName
            self.filefullname = dialog.FileName

            # Add a textbox
            self.textbox.Text = self.filename

            # Generated RT-Plan from current plan
            patient = connect.get_current('Patient')
            plan = connect.get_current('Plan')
            case = connect.get_current('Case')
            beamset = plan.BeamSets
            
            # Generate RT-Dose with new grid size
            self.gridSize = (3 - self.listbox.SelectedIndex) / 10
            retval_0 = beamset[0].SetDefaultDoseGrid(VoxelSize={ 'x': self.gridSize, 'y': self.gridSize, 'z': self.gridSize })
            beamset[0].FractionDose.UpdateDoseGridStructures()
            
            dosealgorithm = beamset[0].AccurateDoseAlgorithm.DoseAlgorithm
            beamset[0].ComputeDose(ComputeBeamDoses=True, DoseAlgorithm=dosealgorithm, ForceRecompute=True)

            self.exportpath = tempfile.gettempdir() + '/RayExportDir' + str(random.randrange(1, 999)) + '/'
            self.exportpath = self.exportpath.replace('\\', '/')
            
            patient.Save()
            os.makedirs(self.exportpath)
            for file in os.scandir(self.exportpath):
                os.remove(file.path)

            case.ScriptableDicomExport(ExportFolderPath=self.exportpath, BeamSets=[beamset[0].BeamSetIdentifier()], DicomFilter="",
                                       EffectiveBeamSetDoseForBeamSets=[beamset[0].BeamSetIdentifier()], IgnorePreConditionWarnings=True)
                                       
            fname = os.listdir(self.exportpath)
            self.dosefilename = self.exportpath + fname[0]
            self.planfilename = self.exportpath + fname[1]

            if fname[0].find('RD')==-1 :
                self.dosefilename = self.exportpath + fname[1]
                self.planfilename = self.exportpath + fname[0]


            # Load previous RP-Plan as draft version of QA RT-Plan
            self.tpsdose = pydicom.read_file(self.dosefilename, force=True)
            qa_dcmdata = pydicom.dcmread(self.planfilename)
            qa_dcmdata.RTPlanName = qa_dcmdata.RTPlanName+'_QA'
            qa_dcmdata.ApprovalStatus = 'UNAPPROVED'
            qa_dcmdata.SOPInstanceUID = pydicom.uid.generate_uid()
            del qa_dcmdata[0x300A, 0x0010]
            loopflag = False
            # read dicomdata
            rc_dcmdata = pydicom.dcmread(self.filefullname)
            
            # Check type of DICOM (RT-Record = '1.2.840.10008.5.1.4.1.1.481.9')            
            if rc_dcmdata.SOPClassUID == '1.2.840.10008.5.1.4.1.1.481.9':
                # Get #field from RT-Record (log)
                rc_no_field = len(rc_dcmdata.TreatmentSessionIonBeamSequence)

                # Remove setup field from RT-Plan
                for i in range(0, len(qa_dcmdata.IonBeamSequence)):
                    if qa_dcmdata.IonBeamSequence[i].TreatmentDeliveryType != 'TREATMENT':
                        del qa_dcmdata.IonBeamSequence[i]

                # Get #field from RT-Plan
                qa_no_field = len(qa_dcmdata.IonBeamSequence)

                # check MRN and #field
                if rc_dcmdata.PatientID == qa_dcmdata.PatientID and qa_no_field == rc_no_field:
                    self.cb1.Checked = True
                    for i in range(0, len(rc_dcmdata.TreatmentSessionIonBeamSequence)):
                        rc_beamseq = rc_dcmdata.TreatmentSessionIonBeamSequence[i]
                        rc_no_cp = rc_beamseq.NumberOfControlPoints

                        qa_beamseq = qa_dcmdata.IonBeamSequence[i]
                        qa_no_cp = qa_beamseq.NumberOfControlPoints
                        # Check between #rc_cp and #qa_cp
                        if rc_no_cp != qa_no_cp:
                            break
                        qa_beamseq.IonControlPointSequence[i].GantryAngle = rc_beamseq.IonControlPointDeliverySequence[i].GantryAngle
                        qa_beamseq.IonControlPointSequence[i].TableTopPitchAngle = rc_beamseq.IonControlPointDeliverySequence[i].TableTopPitchAngle
                        qa_beamseq.IonControlPointSequence[i].TableTopRollAngle = rc_beamseq.IonControlPointDeliverySequence[i].TableTopRollAngle

                        loopflag = False
                        for j in range(0, len(rc_beamseq.IonControlPointDeliverySequence)):
                            rc_cp = rc_beamseq.IonControlPointDeliverySequence[j]
                            qa_cp = qa_beamseq.IonControlPointSequence[j]

                            rc_no_sp = rc_cp.NumberOfScanSpotPositions
                            qa_no_sp = qa_cp.NumberOfScanSpotPositions

                            # Check between #rc_no_sp and #qa_no_sp
                            if rc_no_sp != qa_no_sp:
                                loopflag = True
                                break

                            # Spot position per each energy layer
                            for k in range(0, len(rc_cp.ScanSpotPositionMap)):
                                sl = rc_cp.ScanSpotPositionMap[k]
                                if 100 > sl > -100:
                                    # input logdata into dcm
                                    qa_cp.ScanSpotPositionMap[k] = sl

                            # Beam Metaset
                            for k in range(0, len(rc_cp.ScanSpotMetersetsDelivered)):
                                qa_cp.ScanSpotMetersetWeights[k] = rc_cp.ScanSpotMetersetsDelivered[k]

                            # Total delivered metaset per each energy layer
                            qa_cp.CumulativeMetersetWeight = rc_cp.DeliveredMeterset

                        if loopflag:
                            break

                        # Final MetersetWeight per field
                        qa_beamseq.FinalCumulativeMetersetWeight = rc_beamseq.IonControlPointDeliverySequence[rc_no_cp-1].DeliveredMeterset
                else:
                    shutil.rmtree(self.exportpath)
            else:
                loopflag = True
                msgbox = MessageBox()
                msgbox.Show('Select RT-Record file!')                
                # remove current files
                shutil.rmtree(self.exportpath)
                self.Close()

            if not loopflag:
                self.cb2.Checked = True

                # remove current files
                for file in os.scandir(self.exportpath):
                    os.remove(file.path)

                qa_rtplan_filename = self.exportpath + 'RPLogQA.dcm'
                qa_dcmdata.save_as(qa_rtplan_filename)
                self.button2.Enabled = True
        else:
            self.Close()

    def ok_button2_clicked(self, sender, event):
        # Import DICOM-RT Plan
        patient = connect.get_current('Patient')
        patient_db = connect.get_current('PatientDB')
        case = connect.get_current('Case')
        plan = connect.get_current('Plan')

        patient_id = patient.PatientID
        # Query patients from path by Patient ID
        matching_patients = patient_db.QueryPatientsFromPath(Path=self.exportpath, SearchCriterias={'PatientID': patient_id})

        assert len(matching_patients) == 1, "Found more than 1 patient with ID {}".format(patient_id)
        matching_patient = matching_patients[0]

        # Query all the studies of the matching patient
        studies = patient_db.QueryStudiesFromPath(Path=self.exportpath, SearchCriterias=matching_patient)

        # Query all the series from all the matching studies
        series = []
        for study in studies:
            series += patient_db.QuerySeriesFromPath(Path=self.exportpath, SearchCriterias=study)

        patient.Save()
        # Import CT series from path to current patient
        warnings = patient.ImportDataFromPath(Path=self.exportpath, SeriesOrInstances=series, CaseName=case.CaseName)
        print("Warnings: %s" % warnings)

        # Load QA Plan
        QAPlanName = plan.Name + '_QA'
        QAplanInfo = case.QueryPlanInfo(Filter={'Name': QAPlanName})
        plan = case.LoadPlan(PlanInfo=QAplanInfo[0])

        beamset = plan.BeamSets

        retval_0 = beamset[0].SetDefaultDoseGrid(VoxelSize={ 'x': self.gridSize, 'y': self.gridSize, 'z': self.gridSize })
        beamset[0].FractionDose.UpdateDoseGridStructures()

        dosealgorithm = beamset[0].AccurateDoseAlgorithm.DoseAlgorithm
        beamset[0].ComputeDose(ComputeBeamDoses=True, DoseAlgorithm=dosealgorithm, ForceRecompute=True)


        # remove current files
        for file in os.scandir(self.exportpath):
            os.remove(file.path)
        
        patient.Save()
        case.ScriptableDicomExport(ExportFolderPath=self.exportpath, DicomFilter="",
                                   EffectiveBeamSetDoseForBeamSets=[beamset[0].BeamSetIdentifier()], IgnorePreConditionWarnings=True)
        
        fname = os.listdir(self.exportpath)
        qadosefilename = self.exportpath + fname[0]            
        self.qadose = pydicom.read_file(qadosefilename, force=True)     
        
        
        axes_reference, dose_reference = pymedphys.dicom.zyx_and_dose_from_dataset(self.qadose)
        axes_evaluation, dose_evaluation = pymedphys.dicom.zyx_and_dose_from_dataset(self.tpsdose)
        (z_ref, y_ref, x_ref) = axes_reference
        (z_eval, y_eval, x_eval) = axes_evaluation
                
        local_global_flag = True
        if self.listbox1.SelectedIndex==0:
            local_global_flag = False
            
        gamma_options = {
            'dose_percent_threshold': self.gridSize*10,
            'distance_mm_threshold': self.gridSize*10,
            'lower_percent_dose_cutoff': 10,
            'interp_fraction': 10,  # Should be 10 or more for more accurate results
            'max_gamma': 2,
            'random_subset': None,
            'local_gamma': local_global_flag,
            'ram_available': 2**30  # 1 GB
        }

        gamma = pymedphys.gamma(
            axes_reference, dose_reference, 
            axes_evaluation, dose_evaluation, 
            **gamma_options)
        
        valid_gamma = gamma[~np.isnan(gamma)]

        #num_bins = (gamma_options['interp_fraction'] * gamma_options['max_gamma'])
        #bins = np.linspace(0, gamma_options['max_gamma'], num_bins + 1)

        #plt.hist(valid_gamma, bins, density=True)
        #if density is True, y value is probability density; otherwise, it is count in a bin
        #plt.xlim([0, gamma_options['max_gamma']])
        #plt.xlabel('gamma index')
        #plt.ylabel('probability density')

        pass_ratio = np.sum(valid_gamma <= 1) / len(valid_gamma)
        self.label6.Text = f"Gamma Passing Rate: {pass_ratio*100:.2f}%"
        
        #if gamma_options['local_gamma']:
        #    gamma_norm_condition = 'Local gamma'
        #else:
        #    gamma_norm_condition = 'Global gamma'
        #plt.title(f"Dose cut: {gamma_options['lower_percent_dose_cutoff']}% | {gamma_norm_condition} ({gamma_options['dose_percent_threshold']}%/{gamma_options['distance_mm_threshold']}mm) | Pass Rate(\u03B3<=1): {pass_ratio*100:.2f}% \n ref pts: {len(z_ref)*len(y_ref)*len(x_ref)} | valid \u03B3 pts: {len(valid_gamma)}")
        # plt.savefig('gamma_hist.png', dpi=300)
        
        
        # remove current files
        for file in os.scandir(self.exportpath):
            os.remove(file.path)    
        
        

        self.Close()

# Main
form = LogQAForm()
Application.Run(form)




